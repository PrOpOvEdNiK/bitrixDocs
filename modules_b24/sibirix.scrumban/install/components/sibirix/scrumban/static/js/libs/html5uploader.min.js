/**
 * Upload files to the server using HTML 5 Drag and drop the folders on your local computer
 */
function Uploader(e) {
     function upload(t) {
        var n, r, i, s, o, u, f, l, c;
        if (window.FileReader) {
            this.loadEnd = function () {
                s = c.result;
                n = new XMLHttpRequest;
                n.open("POST", e.targetPHP + "?up=true", true);
                r = "xxxxxxxxx";
                i = "--" + r + "\r\n";
                i += "Content-Disposition: form-data; name='upload'; filename='" + t.name + "'\r\n";
                i += "Content-Type: application/octet-stream\r\n\r\n";
                i += s + "\r\n";
                i += "--" + r + "--";
                n.setRequestHeader("content-type", "multipart/form-data; boundary=" + r);
                n.open("POST", e.targetPHP + "?up=true&base64=true", true);
                if (e.uploadParams) {
                    for (var o = 0; o < e.uploadParams.length; o++) {
                        n.setRequestHeader(e.uploadParams[o][0], e.uploadParams[o][1])
                    }
                }
                n.setRequestHeader("UP-FILENAME", encodeURIComponent(t.name)); // trouble with cyrillic (spec. supports only Latin-1 symbols)
                n.setRequestHeader("UP-SIZE", t.size);
                n.setRequestHeader("UP-TYPE", t.type);
                var u = $('<div class="uploadify-queue-item"><span class="fileName"></span><span class="data"> ()</span><div class="uploadify-progress"><div class="uploadify-progress-bar" style="width: 0%; "></div></div></div>');
                u.find(".fileName").html(t.name);
                $('#file_upload_' + e.uploadifySuffix + '-queue').append(u);
                n.upload.onprogress = function (e) {
                    if (e.lengthComputable) {
                        var t = parseInt(e.loaded / e.total * 100);
                        u.find(".data").html(" - " + t + "%");
                        u.find(".uploadify-progress-bar").width(t + "%")
                    }
                };
                if (e.successCallback) {
                    n.onreadystatechange = function () {
                        if (n.readyState == 4 && n.status == 200) {
                            e.successCallback(n.responseText);
                            u.find(".data").html(String._('FILE_LOADED'));
                            setTimeout(function () {
                                u.fadeOut("slow", function () {
                                    u.remove()
                                })
                            }, 3e3)
                        }
                    }
                }
                n.send(window.btoa(s));
                if (e.show) {
                    f = document.createElement("div");
                    f.innerHTML = String._('HTML_UPLOADER_1') + ": " + t.name + " size " + t.size + " B";
                    document.getElementById(e.show).appendChild(f)
                }
                if (e.status) {
                    document.getElementById(e.status).innerHTML = String._('HTML_UPLOADER_1') + ": 100%<br/>" + String._('HTML_UPLOADER_2');
                }
            };
            this.loadError = function (t) {
                switch (t.target.error.code) {
                    case t.target.error.NOT_FOUND_ERR:
                        document.getElementById(e.status).innerHTML = String._('HTML_UPLOADER_5');
                        break;
                    case t.target.error.NOT_READABLE_ERR:
                        document.getElementById(e.status).innerHTML = String._('HTML_UPLOADER_6');
                        break;
                    case t.target.error.ABORT_ERR:
                        break;
                    default:
                        document.getElementById(e.status).innerHTML = String._('HTML_UPLOADER_4');
                }
            };
            this.loadProgress = function (t) {
                if (t.lengthComputable) {
                    l = Math.round(t.loaded * 100 / t.total);
                    document.getElementById(e.status).innerHTML = String._('HTML_UPLOADER_1') + ": " + l + "%"
                }
            };
            this.previewNow = function (n) {
                s = u.result;
                o = document.createElement("img");
                o.className = "addedIMG";
                o.file = t;
                o.src = s;
                document.getElementById(e.show).appendChild(o)
            };
            c = new FileReader;
            if (c.addEventListener) {
                c.addEventListener("loadend", this.loadEnd, false);
                if (e.status) {
                    c.addEventListener("error", this.loadError, false);
                    c.addEventListener("progress", this.loadProgress, false)
                }
            } else {
                c.onloadend = this.loadEnd;
                if (e.status) {
                    c.onerror = this.loadError;
                    c.onprogress = this.loadProgress
                }
            }
            u = new FileReader;
            if (u.addEventListener) {
                u.addEventListener("loadend", this.previewNow, false)
            } else {
                u.onloadend = this.previewNow
            }
            c.readAsBinaryString(t);
            if (e.show) {
                u.readAsDataURL(t)
            }
        } else {
            n = new XMLHttpRequest;
            n.open("POST", e.targetPHP + "?up=true", true);
            if (e.uploadParams) {
                for (var h = 0; h < e.uploadParams.length; h++) {
                    n.setRequestHeader(e.uploadParams[h][0], e.uploadParams[h][1])
                }
            }
            n.setRequestHeader("UP-FILENAME", t.name);
            n.setRequestHeader("UP-SIZE", t.size);
            n.setRequestHeader("UP-TYPE", t.type);
            var p = $('<div class="uploadify-queue-item"><span class="fileName"></span><span class="data"> ()</span><div class="uploadify-progress"><div class="uploadify-progress-bar" style="width: 0%; "></div></div></div>');
            p.find(".fileName").html(t.name);
            $("#file_upload-queue").append(p);
            n.upload.onprogress = function (e) {
                if (e.lengthComputable) {
                    var t = parseInt(e.loaded / e.total * 100);
                    p.find(".data").html(" ( - " + t + "%)");
                    p.find(".uploadify-progress-bar").width(t + "%")
                }
            };
            if (e.successCallback) {
                n.onreadystatechange = function () {
                    if (n.readyState == 4 && n.status == 200) {
                        e.successCallback(n.responseText);
                        p.find(".data").html(" ( - " + String._('HTML_UPLOADER_3') + ")");
                        setTimeout(function () {
                            p.fadeOut("slow", function () {
                                p.remove()
                            })
                        }, 3e3)
                    }
                }
            }
            n.send(t);
            if (e.show) {
                f = document.createElement("div");
                f.innerHTML = String._('HTML_UPLOADER_3') + ": " + t.name + ", " + t.size + " B";
                document.getElementById(e.show).appendChild(f)
            }
        }
    }
    this.drop = function (ev) {
        var t, n;
        ev.preventDefault();
        t = ev.dataTransfer.files;
        for (var r = 0; r < t.length; r++) {
            n = t[r];
            upload(n)
        }
    };
    var t, n = true;
    if (typeof window.addEventListener == "undefined") {
        n = false
    } else {
        if ($.isArray(e.place)) {
            for (var r = 0; r < e.place.length; r++) {
                t = document.getElementById(e.place[r]);
                t.addEventListener("dragover", function (e) {
                    e.stopPropagation();
                    e.preventDefault()
                }, true);
                t.addEventListener("drop", this.drop, false)
            }
        } else {
            t = document.getElementById(e.place);
            t.addEventListener("dragover", function (ev) {
                ev.stopPropagation();
                ev.preventDefault()
            }, true);
            t.addEventListener("drop", this.drop, false)
        }
    }
    this.destroy = function () {
        if (!n)return true;
        var t;
        if ($.isArray(e.place)) {
            for (var r = 0; r < e.place.length; r++) {
                t = document.getElementById(e.place[r]);
                t.removeEventListener("dragover");
                t.removeEventListener("drop")
            }
        } else {
            t = document.getElementById(e.place);
            t.removeEventListener("dragover");
            t.removeEventListener("drop")
        }
    }
};
